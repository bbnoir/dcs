module Seq(
	// Input signals
	clk,
	rst_n,
	in_valid,
	in_data,
	// Output signals
	out_valid,
	out_data
);

//---------------------------------------------------------------------
//   INPUT AND OUTPUT DECLARATION                         
//---------------------------------------------------------------------
input        clk, rst_n, in_valid;
input 	[3:0]in_data;
output logic out_valid;
output logic [3:0]out_data;

//---------------------------------------------------------------------
//   REG AND WIRE DECLARATION                         
//---------------------------------------------------------------------
logic in_buf, in_bbuf;
logic [3:0]reg1, reg2;
assign trigger = ( (reg1 > reg2) && (reg2 > in_data) || (reg1 < reg2) && (reg2 < in_data) );

always@(posedge clk)begin
	in_buf <= in_valid;
	in_bbuf <= in_buf;
end

always@(posedge clk)begin
	if(in_valid)begin
		reg2 <= in_data;
		reg1 <= reg2;
	end
end

always@(posedge clk or negedge rst_n)begin
	if(!rst_n)
		out_valid <= 0;
	else begin
		if(in_bbuf && in_valid) out_valid <= 1;
		else out_valid <= 0;
	end
end

always@(posedge clk or negedge rst_n)begin
	if(!rst_n)
		out_data <= 0;
	else begin
		if(in_bbuf && in_valid) out_data <= trigger;
		else out_data <= 0;
	end
end

endmodule
